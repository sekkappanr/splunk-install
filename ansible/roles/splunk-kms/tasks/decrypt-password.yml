---

- block:
  - name: "Check of the {{ key_name }} password exisits"
    stat: path={{ safe_repo_home }}/{{ env_dir }}/splunk_password/{{ key_name }}.password
    register: check_key_outputs

  - name: "fail whe password does not exisit"
    fail: msg="[ERROR] the key ({{ key_name }}) you enquired does not exists"
    when: not check_key_outputs.stat.exists

# decrypt the passwords
- block:
  - name: "Decrypt the password using the aws kms"
    shell: "export AWS_SECRET_ACCESS_KEY={{ assumed_role.sts_creds.secret_key }}; export AWS_ACCESS_KEY_ID={{ assumed_role.sts_creds.access_key }}; export AWS_SESSION_TOKEN={{ assumed_role.sts_creds.session_token }}; aws kms decrypt --ciphertext-blob fileb://{{ safe_repo_home }}/{{ env_dir }}/splunk_password/{{ key_name }}.password --output text --query Plaintext | base64 --decode"
    register: password

  - set_fact:
      splunk_admin_password: "{{ password.stdout }}"
    when: key_name == "splunk_admin"

  - set_fact:
      splunk_cluster_password: "{{ password.stdout }}"
    when: key_name == "splunk_cluster"

    - set_fact:
      splunk_srv_password: "{{ password.stdout }}"
    when: key_name == "srv_splunk_admin"